/*
 * Copyright 2015 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

package org.engcia;
// package must be defined in packages from kmodule.xml file

//list any import classes here.
import org.engcia.model.Sensor;
import org.engcia.model.Hypothesis;
import org.engcia.model.Conclusion;
import org.engcia.model.Observation;
import java.util.ArrayList;

//declare any global variables here

query "Conclusions"
	$conclusion : Conclusion()
end

// AOCS Module
rule "AOCS thermal sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "AOCS", type matches "Thermal", (value < -20 || value > 30)))
	then
		Observation o = new Observation(Observation.AOCSThermalSubSystemFailure);
		insert(o);
end

rule "AOCS thermal sensor error"
	when
	    $count : ArrayList(size == 1) from collect($sensor: Sensor(subSystem matches "AOCS", type matches "Thermal", (value < -20 || value > 30)))
	then
		Observation o = new Observation(Observation.AOCSThermalSensorError);
		insert(o);
end

rule "AOCS thermal sensor ok"
	when
	    $count : ArrayList(size == 0) from collect($sensor: Sensor(subSystem matches "AOCS", type matches "Thermal", (value < -20 || value > 30)))
	then
		Observation o = new Observation(Observation.AOCSThermalSubSystemOK);
		insert(o);
end


rule "AOCS voltage sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "AOCS", type matches "Voltage", (value < 27 || value > 32)))
	then
		Observation o = new Observation(Observation.AOCSVoltageSubSystemFailure);
		insert(o);
end

rule "AOCS voltage sensor error"
	when
	    $count : ArrayList(size == 1) from collect($sensor: Sensor(subSystem matches "AOCS", type matches "Voltage", (value < 27 || value > 32)))
	then
		Observation o = new Observation(Observation.AOCSVoltageSensorError);
		insert(o);
end

rule "AOCS voltage sensor ok"
	when
	    $count : ArrayList(size == 0) from collect($sensor: Sensor(subSystem matches "AOCS", type matches "Voltage", (value < 27 || value > 32)))
	then
		Observation o = new Observation(Observation.AOCSVoltageSubSystemOK);
		insert(o);
end

rule "AOCS current sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "AOCS", type matches "Current", (value < 2 || value > 5)))
	then
		Observation o = new Observation(Observation.AOCSCurrentSubSystemFailure);
		insert(o);
end

rule "AOCS current sensor error"
	when
	    $count : ArrayList(size == 1) from collect($sensor: Sensor(subSystem matches "AOCS", type matches "Current", (value < 2 || value > 5)))
	then
		Observation o = new Observation(Observation.AOCSCurrentSensorError);
		insert(o);
end

rule "AOCS current sensor ok"
	when
	    $count : ArrayList(size == 0) from collect($sensor: Sensor(subSystem matches "AOCS", type matches "Current", (value < 2 || value > 5)))
	then
		Observation o = new Observation(Observation.AOCSCurrentSubSystemOK);
		insert(o);
end

// Payload Module
rule "Payload thermal sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Payload", type matches "Thermal", (value < -20 || value > 30)))
	then
		Observation o = new Observation(Observation.PayloadThermalSubSystemFailure);
		insert(o);
end

rule "PayPayload thermal sensor error"
	when
	    $count : ArrayList(size == 1) from collect($sensor: Sensor(subSystem matches "Payload", type matches "Thermal", (value < -20 || value > 30)))
	    $sensorOut : Sensor(subSystem matches "Payload", type matches "Thermal", (value < -20 || value > 30))
	then
		Observation o = new Observation(Observation.PayloadThermalSensorError);
		insert(o);
end

rule "PayPayload thermal sensor ok"
	when
	    $count : ArrayList(size == 0) from collect($sensor: Sensor(subSystem matches "Payload", type matches "Thermal", (value < -20 || value > 30)))
	    $sensorOut : Sensor(subSystem matches "Payload", type matches "Thermal", (value < -20 || value > 30))
	then
		Observation o = new Observation(Observation.PayloadThermalSubSystemOK);
		insert(o);
end

rule "Payload voltage sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Payload", type matches "Voltage", (value < 27 || value > 32)))
	then
		Observation o = new Observation(Observation.PayloadVoltageSubSystemFailure);
		insert(o);
end

rule "Payload voltage sensor error"
	when
	    $count : ArrayList(size == 1) from collect($sensor: Sensor(subSystem matches "Payload", type matches "Voltage", (value < 27 || value > 32)))
	then
		Observation o = new Observation(Observation.PayloadVoltageSensorError);
		insert(o);
end

rule "PayPayload voltage sensor ok"
	when
	    $count : ArrayList(size == 0) from collect($sensor: Sensor(subSystem matches "Payload", type matches "Voltage", (value < 27 || value > 32)))
	then
		Observation o = new Observation(Observation.PayloadVoltageSubSystemOK);
		insert(o);
end

rule "Payload current sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Payload", type matches "Current", (value < 2 || value > 5)))
	then
		Observation o = new Observation(Observation.PayloadCurrentSubSystemFailure);
		insert(o);
end

rule "Payload current sensor error"
	when
	    $count : ArrayList(size == 1) from collect($sensor: Sensor(subSystem matches "Payload", type matches "Current", (value < 2 || value > 5)))
	then
		Observation o = new Observation(Observation.PayloadCurrentSensorError);
		insert(o);
end

rule "PayPayload current sensor ok"
	when
	    $count : ArrayList(size == 0) from collect($sensor: Sensor(subSystem matches "Payload", type matches "Current", (value < 2 || value > 5)))
	then
		Observation o = new Observation(Observation.PayloadCurrentSubSystemOK);
		insert(o);
end

// Power Module
rule "Power thermal sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Power", type matches "Thermal", (value < -20 || value > 30)))
	then
		Observation o = new Observation(Observation.PowerThermalSubSystemFailure);
		insert(o);
end

rule "Power thermal sensor error"
	when
	    $count : ArrayList(size == 1) from collect($sensor: Sensor(subSystem matches "Power", type matches "Thermal", (value < -20 || value > 30)))
	then
		Observation o = new Observation(Observation.PowerThermalSensorError);
		insert(o);
end

rule "Power thermal sensor ok"
	when
	    $count : ArrayList(size == 0) from collect($sensor: Sensor(subSystem matches "Power", type matches "Thermal", (value < -20 || value > 30)))
	then
		Observation o = new Observation(Observation.PowerThermalSubSystemOK);
		insert(o);
end

rule "Power voltage sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Power", type matches "Voltage", (value < 27 || value > 32)))
	then
		Observation o = new Observation(Observation.PowerVoltageSubSystemFailure);
		insert(o);
end

rule "Power voltage sensor error"
	when
	    $count : ArrayList(size == 1) from collect($sensor: Sensor(subSystem matches "Power", type matches "Voltage", (value < 27 || value > 32)))
	then
		Observation o = new Observation(Observation.PowerVoltageSensorError);
		insert(o);
end

rule "Power voltage sensor ok"
	when
	    $count : ArrayList(size == 0) from collect($sensor: Sensor(subSystem matches "Power", type matches "Voltage", (value < 27 || value > 32)))
	then
		Observation o = new Observation(Observation.PowerVoltageSubSystemOK);
		insert(o);
end

rule "Power current sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Power", type matches "Current", (value < 2 || value > 5)))
	then
		Observation o = new Observation(Observation.PowerCurrentSubSystemFailure);
		insert(o);
end

rule "Power current sensor error"
	when
	    $count : ArrayList(size == 1) from collect($sensor: Sensor(subSystem matches "Power", type matches "Current", (value < 2 || value > 5)))
	then
		Observation o = new Observation(Observation.PowerCurrentSensorError);
		insert(o);
end

rule "Power current sensor ok"
	when
	    $count : ArrayList(size == 0) from collect($sensor: Sensor(subSystem matches "Power", type matches "Current", (value < 2 || value > 5)))
	then
		Observation o = new Observation(Observation.PowerCurrentSubSystemOK);
		insert(o);
end

// OBC Module
rule "OBC thermal sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "OBC", type matches "Thermal", (value < -20 || value > 30)))
	then
		Observation o = new Observation(Observation.OBCThermalSubSystemFailure);
		insert(o);
end

rule "OBC thermal sensor error"
	when
	    $count : ArrayList(size == 1) from collect($sensor: Sensor(subSystem matches "OBC", type matches "Thermal", (value < -20 || value > 30)))
	then
		Observation o = new Observation(Observation.OBCThermalSensorError);
		insert(o);
end


rule "OBC thermal sensor ok"
	when
	    $count : ArrayList(size == 0) from collect($sensor: Sensor(subSystem matches "OBC", type matches "Thermal", (value < -20 || value > 30)))
	then
		Observation o = new Observation(Observation.OBCThermalSubSystemOK);
		insert(o);
end


rule "OBC voltage sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "OBC", type matches "Voltage", (value < 27 || value > 32)))
	then
		Observation o = new Observation(Observation.OBCVoltageSubSystemFailure);
		insert(o);
end

rule "OBC voltage sensor error"
	when
	    $count : ArrayList(size == 1) from collect($sensor: Sensor(subSystem matches "OBC", type matches "Voltage", (value < 27 || value > 32)))
	then
		Observation o = new Observation(Observation.OBCVoltageSensorError);
		insert(o);
end

rule "OBC voltage sensor ok"
	when
	    $count : ArrayList(size == 0) from collect($sensor: Sensor(subSystem matches "OBC", type matches "Voltage", (value < 27 || value > 32)))
	then
		Observation o = new Observation(Observation.OBCVoltageSubSystemOK);
		insert(o);
end

rule "OBC current sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "OBC", type matches "Current", (value < 2 || value > 5)))
	then
		Observation o = new Observation(Observation.OBCCurrentSubSystemFailure);
		insert(o);
end

rule "OBC current sensor error"
	when
	    $count : ArrayList(size == 1) from collect($sensor: Sensor(subSystem matches "OBC", type matches "Current", (value < 2 || value > 5)))
	then
		Observation o = new Observation(Observation.OBCCurrentSensorError);
		insert(o);
end

rule "OBC current sensor ok"
	when
	    $count : ArrayList(size == 0) from collect($sensor: Sensor(subSystem matches "OBC", type matches "Current", (value < 2 || value > 5)))
	then
		Observation o = new Observation(Observation.OBCCurrentSubSystemOK);
		insert(o);
end

// Communication Module
rule "Communication thermal sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Communication", type matches "Thermal", (value < -20 || value > 30)))
	then
		Observation o = new Observation(Observation.CommunicationThermalSubSystemFailure);
		insert(o);
end

rule "Communication thermal sensor error"
	when
	    $count : ArrayList(size == 1) from collect($sensor: Sensor(subSystem matches "Communication", type matches "Thermal", (value < -20 || value > 30)))
	then
		Observation o = new Observation(Observation.CommunicationThermalSensorError);
		insert(o);
end

rule "Communication thermal sensor ok"
	when
	    $count : ArrayList(size == 0) from collect($sensor: Sensor(subSystem matches "Communication", type matches "Thermal", (value < -20 || value > 30)))
	then
		Observation o = new Observation(Observation.CommunicationThermalSubSystemOK);
		insert(o);
end

rule "Communication voltage sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Communication", type matches "Voltage", (value < 27 || value > 32)))
	then
		Observation o = new Observation(Observation.CommunicationVoltageSubSystemFailure);
		insert(o);
end

rule "Communication voltage sensor error"
	when
	    $count : ArrayList(size == 1) from collect($sensor: Sensor(subSystem matches "Communication", type matches "Voltage", (value < 27 || value > 32)))
	then
		Observation o = new Observation(Observation.CommunicationVoltageSensorError);
		insert(o);
end

rule "Communication voltage sensor ok"
	when
	    $count : ArrayList(size == 0) from collect($sensor: Sensor(subSystem matches "Communication", type matches "Voltage", (value < 27 || value > 32)))
	then
		Observation o = new Observation(Observation.CommunicationVoltageSubSystemOK);
		insert(o);
end

rule "Communication current sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Communication", type matches "Current", (value < 2 || value > 5)))
	then
		Observation o = new Observation(Observation.CommunicationCurrentSubSystemFailure);
		insert(o);
end

rule "Communication current sensor error"
	when
	    $count : ArrayList(size == 1) from collect($sensor: Sensor(subSystem matches "Communication", type matches "Current", (value < 2 || value > 5)))
	then
		Observation o = new Observation(Observation.CommunicationCurrentSensorError);
		insert(o);
end

rule "Communication current sensor ok"
	when
	    $count : ArrayList(size == 0) from collect($sensor: Sensor(subSystem matches "Communication", type matches "Current", (value < 2 || value > 5)))
	then
		Observation o = new Observation(Observation.CommunicationCurrentSubSystemOK);
		insert(o);
end

// Thermal Controller Module
rule "Thermal Controller thermal sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Thermal Controller", type matches "Thermal", (value < -20 || value > 30)))
	then
		Observation o = new Observation(Observation.ThermalControllerThermalSubSystemFailure);
		insert(o);
end

rule "Thermal Controller thermal sensor error"
	when
	    $count : ArrayList(size == 1) from collect($sensor: Sensor(subSystem matches "Thermal Controller", type matches "Thermal", (value < -20 || value > 30)))
	then
		Observation o = new Observation(Observation.ThermalControllerThermalSensorError);
		insert(o);
end

rule "Thermal Controller thermal sensor ok"
	when
	    $count : ArrayList(size == 0) from collect($sensor: Sensor(subSystem matches "Communication", type matches "Thermal", (value < -20 || value > 30)))
	then
		Observation o = new Observation(Observation.ThermalControllerThermalSubSystemOK);
		insert(o);
end

rule "Thermal Controller voltage sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Thermal Controller", type matches "Voltage", (value < 27 || value > 32)))
	then
		Observation o = new Observation(Observation.ThermalControllerVoltageSubSystemFailure);
		insert(o);
end

rule "Thermal Controller voltage sensor error"
	when
	    $count : ArrayList(size == 1) from collect($sensor: Sensor(subSystem matches "Thermal Controller", type matches "Voltage", (value < 27 || value > 32)))
	then
		Observation o = new Observation(Observation.ThermalControllerVoltageSensorError);
		insert(o);
end

rule "Thermal Controller voltage sensor ok"
	when
	    $count : ArrayList(size == 0) from collect($sensor: Sensor(subSystem matches "Communication", type matches "Voltage", (value < 27 || value > 32)))
	then
		Observation o = new Observation(Observation.ThermalControllerVoltageSubSystemOK);
		insert(o);
end

rule "Thermal Controller current sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Thermal Controller", type matches "Current", (value < 2 || value > 5)))
	then
		Observation o = new Observation(Observation.ThermalControllerCurrentSubSystemFailure);
		insert(o);
end

rule "Thermal Controller current sensor error"
	when
	    $count : ArrayList(size == 1) from collect($sensor: Sensor(subSystem matches "Thermal Controller", type matches "Current", (value < 2 || value > 5)))
	then
		Observation o = new Observation(Observation.ThermalControllerCurrentSensorError);
		insert(o);
end

rule "Thermal Controller current sensor ok"
	when
	    $count : ArrayList(size == 0) from collect($sensor: Sensor(subSystem matches "Communication", type matches "Current", (value < 2 || value > 5)))
	then
		Observation o = new Observation(Observation.ThermalControllerCurrentSubSystemOK);
		insert(o);
end

// Propulsion Module
rule "Propulsion thermal sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Propulsion", type matches "Thermal", (value < -20 || value > 30)))
	then
		Observation o = new Observation(Observation.PropulsionThermalSubSystemFailure);
		insert(o);
end

rule "Propulsion thermal sensor error"
	when
	    $count : ArrayList(size == 1) from collect($sensor: Sensor(subSystem matches "Propulsion", type matches "Thermal", (value < -20 || value > 30)))
	then
		Observation o = new Observation(Observation.PropulsionThermalSensorError);
		insert(o);
end

rule "Propulsion thermal sensor ok"
	when
	    $count : ArrayList(size == 0) from collect($sensor: Sensor(subSystem matches "Propulsion", type matches "Thermal", (value < -20 || value > 30)))
	then
		Observation o = new Observation(Observation.PropulsionThermalSubSystemOK);
		insert(o);
end

rule "Propulsion voltage sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Propulsion", type matches "Voltage", (value < 27 || value > 32)))
	then
		Observation o = new Observation(Observation.PropulsionVoltageSubSystemFailure);
		insert(o);
end

rule "Propulsion voltage sensor error"
	when
	    $count : ArrayList(size == 1) from collect($sensor: Sensor(subSystem matches "Propulsion", type matches "Voltage", (value < 27 || value > 32)))
	then
		Observation o = new Observation(Observation.PropulsionVoltageSensorError);
		insert(o);
end

rule "Propulsion voltage sensor ok"
	when
	    $count : ArrayList(size == 0) from collect($sensor: Sensor(subSystem matches "Propulsion", type matches "Voltage", (value < 27 || value > 32)))
	then
		Observation o = new Observation(Observation.PropulsionVoltageSubSystemOK);
		insert(o);
end

rule "Propulsion current sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Propulsion", type matches "Current", (value < 2 || value > 5)))
	then
		Observation o = new Observation(Observation.PropulsionCurrentSubSystemFailure);
		insert(o);
end

rule "Propulsion current sensor error"
	when
	    $count : ArrayList(size == 1) from collect($sensor: Sensor(subSystem matches "Propulsion", type matches "Current", (value < 2 || value > 5)))
	then
		Observation o = new Observation(Observation.PropulsionCurrentSensorError);
		insert(o);
end

rule "Propulsion current sensor ok"
	when
	    $count : ArrayList(size == 0) from collect($sensor: Sensor(subSystem matches "Propulsion", type matches "Current", (value < 2 || value > 5)))
	then
		Observation o = new Observation(Observation.PropulsionCurrentSubSystemOK);
		insert(o);
end

rule "AOCS Switch Not Properly Off"
    when
        Observation(description matches Observation.AOCSVoltageSubSystemOK)
        $sensorSwitch : Sensor(subSystem matches "AOCS", type matches "Switch", value == 0)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "AOCS", type matches "Current", (value < 0.1 || value > 0.0)))
    then
        Conclusion c = new Conclusion(Conclusion.AOCSSwitchNotOff, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "AOCS Switch Not Properly On"
    when
        Observation(description matches Observation.AOCSVoltageSubSystemOK)
        $sensorSwitch : Sensor(subSystem matches "AOCS", type matches "Switch", value == 1)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "AOCS", type matches "Current", (value < 5 || value > 2)))
    then
        Conclusion c = new Conclusion(Conclusion.AOCSSwitchNotOn, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "Payload Switch Not Properly Off"
    when
        Observation(description matches Observation.PayloadVoltageSubSystemOK)
        $sensorSwitch : Sensor(subSystem matches "Payload", type matches "Switch", value == 0)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Payload", type matches "Current", (value < 0.1 || value > 0.0)))
    then
        Conclusion c = new Conclusion(Conclusion.PayloadSwitchNotOff, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "Payload Switch Not Properly On"
    when
        Observation(description matches Observation.PayloadVoltageSubSystemOK)
        $sensorSwitch : Sensor(subSystem matches "Payload", type matches "Switch", value == 1)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Payload", type matches "Current", (value < 5 || value > 2)))
    then
        Conclusion c = new Conclusion(Conclusion.PayloadSwitchNotOn, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "Power Switch Not Properly Off"
    when
        Observation(description matches Observation.PowerVoltageSubSystemOK)
        $sensorSwitch : Sensor(subSystem matches "Power", type matches "Switch", value == 0)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Power", type matches "Current", (value < 0.1 || value > 0.0)))
    then
        Conclusion c = new Conclusion(Conclusion.PowerSwitchNotOff, $sensorSwitch.getSubSystem());
end

rule "Power Switch Not Properly On"
    when
        Observation(description matches Observation.PowerVoltageSubSystemOK)
        $sensorSwitch : Sensor(subSystem matches "Power", type matches "Switch", value == 1)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Power", type matches "Current", (value < 5 || value > 2)))
    then
        Conclusion c = new Conclusion(Conclusion.PowerSwitchNotOn, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "OBC Switch Not Properly Off"
    when
        Observation(description matches Observation.OBCVoltageSubSystemOK)
        $sensorSwitch : Sensor(subSystem matches "OBC", type matches "Switch", value == 0)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "OBC", type matches "Current", (value < 0.1 || value > 0.0)))
    then
        Conclusion c = new Conclusion(Conclusion.OBCSwitchNotOff, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "OBC Switch Not Properly On"
    when
        Observation(description matches Observation.OBCVoltageSubSystemOK)
        $sensorSwitch : Sensor(subSystem matches "OBC", type matches "Switch", value == 1)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "OBC", type matches "Current", (value < 5 || value > 2)))
    then
        Conclusion c = new Conclusion(Conclusion.OBCSwitchNotOn, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "Communication Switch Not Properly Off"
    when
        Observation(description matches Observation.CommunicationVoltageSubSystemOK)
        $sensorSwitch : Sensor(subSystem matches "Power", type matches "Communication", value == 0)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Communication", type matches "Current", (value < 0.1 || value > 0.0)))
    then
        Conclusion c = new Conclusion(Conclusion.CommunicationSwitchNotOff, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "Communication Switch Not Properly On"
    when
        Observation(description matches Observation.CommunicationVoltageSubSystemOK)
        $sensorSwitch : Sensor(subSystem matches "Communication", type matches "Switch", value == 1)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Communication", type matches "Current", (value < 5 || value > 2)))
    then
        Conclusion c = new Conclusion(Conclusion.CommunicationSwitchNotOn, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "Thermal Controller Switch Not Properly Off"
    when
        Observation(description matches Observation.ThermalControllerVoltageSubSystemOK)
        $sensorSwitch : Sensor(subSystem matches "Thermal Controller", type matches "Switch", value == 0)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Thermal Controller", type matches "Current", (value < 0.1 || value > 0.0)))
    then
        Conclusion c = new Conclusion(Conclusion.ThermalControllerSwitchNotOff, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "Thermal Controller Switch Not Properly On"
    when
        Observation(description matches Observation.ThermalControllerVoltageSubSystemOK)
        $sensorSwitch : Sensor(subSystem matches "Thermal Controller", type matches "Switch", value == 1)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Thermal Controller", type matches "Current", (value < 5 || value > 2)))
    then
        Conclusion c = new Conclusion(Conclusion.ThermalControllerSwitchNotOn, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "Propulsion Switch Not Properly Off"
    when
        Observation(description matches Observation.PropulsionVoltageSubSystemOK)
        $sensorSwitch : Sensor(subSystem matches "Propulsion", type matches "Switch", value == 0)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Propulsion", type matches "Current", (value < 0.1 || value > 0.0)))
    then
        Conclusion c = new Conclusion(Conclusion.PropulsionSwitchNotOff, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "Propulsion Switch Not Properly On"
    when
        Observation(description matches Observation.PropulsionVoltageSubSystemOK)
        $sensorSwitch : Sensor(subSystem matches "Propulsion", type matches "Switch", value == 1)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Propulsion", type matches "Current", (value < 5 || value > 2)))
    then
        Conclusion c = new Conclusion(Conclusion.PropulsionSwitchNotOn, $sensorSwitch.getSubSystem());
		insert(c);
end

//
rule "AOCS Switch low current error"
    when
        $sensorSwitch : Sensor(subSystem matches "AOCS", type matches "Switch", value == 0)
        Observation(description matches Observation.AOCSVoltageSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "AOCS", type matches "Current", value < 2))
    then
        Conclusion c = new Conclusion(Conclusion.AOCSLowCurrentError, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "Payload Switch low current error"
    when
        $sensorSwitch : Sensor(subSystem matches "Payload", type matches "Switch", value == 0)
        Observation(description matches Observation.PayloadVoltageSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Payload", type matches "Current", value < 2))
    then
        Conclusion c = new Conclusion(Conclusion.PayloadLowCurrentError, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "Power Switch low current error"
    when
        $sensorSwitch : Sensor(subSystem matches "Power", type matches "Switch", value == 0)
        Observation(description matches Observation.PowerVoltageSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Power", type matches "Current", value < 2))
    then
        Conclusion c = new Conclusion(Conclusion.PowerLowCurrentError, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "OBC Switch low current error"
    when
        $sensorSwitch : Sensor(subSystem matches "OBC", type matches "Switch", value == 0)
        Observation(description matches Observation.OBCVoltageSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "OBC", type matches "Current", value < 2))
    then
        Conclusion c = new Conclusion(Conclusion.OBCLowCurrentError, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "Communication Switch low current error"
    when
        $sensorSwitch : Sensor(subSystem matches "Communication", type matches "Switch", value == 0)
        Observation(description matches Observation.CommunicationVoltageSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Communication", type matches "Current", value < 2))
    then
        Conclusion c = new Conclusion(Conclusion.CommunicationLowCurrentError, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "Thermal Switch low current error"
    when
        $sensorSwitch : Sensor(subSystem matches "Thermal", type matches "Switch", value == 0)
        Observation(description matches Observation.ThermalControllerVoltageSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Thermal", type matches "Current", value < 2))
    then
        Conclusion c = new Conclusion(Conclusion.ThermalControllerLowCurrentError, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "Propulsion Switch low current error"
    when
        $sensorSwitch : Sensor(subSystem matches "Propulsion", type matches "Switch", value == 0)
        Observation(description matches Observation.PropulsionVoltageSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Propulsion", type matches "Current", value < 2))
    then
        Conclusion c = new Conclusion(Conclusion.PropulsionLowCurrentError, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "AOCS Switch high current error"
    when
        $sensorSwitch : Sensor(subSystem matches "AOCS", type matches "Switch", value == 0)
        Observation(description matches Observation.AOCSVoltageSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "AOCS", type matches "Current", value > 5))
    then
        Conclusion c = new Conclusion(Conclusion.AOCSHighCurrentError, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "Payload Switch high current error"
    when
        $sensorSwitch : Sensor(subSystem matches "Payload", type matches "Switch", value == 0)
        Observation(description matches Observation.PayloadVoltageSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Payload", type matches "Current", value > 5))
    then
        Conclusion c = new Conclusion(Conclusion.PayloadHighCurrentError, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "Power Switch high current error"
    when
        $sensorSwitch : Sensor(subSystem matches "Power", type matches "Switch", value == 0)
        Observation(description matches Observation.PowerVoltageSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Power", type matches "Current", value > 5))
    then
        Conclusion c = new Conclusion(Conclusion.PowerHighCurrentError, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "OBC Switch high current error"
    when
        $sensorSwitch : Sensor(subSystem matches "OBC", type matches "Switch", value == 0)
        Observation(description matches Observation.OBCVoltageSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "OBC", type matches "Current", value > 5))
    then
        Conclusion c = new Conclusion(Conclusion.OBCHighCurrentError, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "Communication Switch high current error"
    when
        $sensorSwitch : Sensor(subSystem matches "Communication", type matches "Switch", value == 0)
        Observation(description matches Observation.CommunicationVoltageSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Communication", type matches "Current", value > 5))
    then
        Conclusion c = new Conclusion(Conclusion.CommunicationHighCurrentError, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "Thermal Switch high current error"
    when
        $sensorSwitch : Sensor(subSystem matches "Thermal", type matches "Switch", value == 0)
        Observation(description matches Observation.ThermalControllerVoltageSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Thermal", type matches "Current", value > 5))
    then
        Conclusion c = new Conclusion(Conclusion.ThermalControllerHighCurrentError, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "Propulsion Switch high current error"
    when
        $sensorSwitch : Sensor(subSystem matches "Propulsion", type matches "Switch", value == 0)
        Observation(description matches Observation.PropulsionVoltageSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Propulsion", type matches "Current", value > 5))
    then
        Conclusion c = new Conclusion(Conclusion.PropulsionHighCurrentError, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "AOCS Switch high current error"
    when
        $sensorSwitch : Sensor(subSystem matches "AOCS", type matches "Switch", value == 0)
        Observation(description matches Observation.AOCSThermalSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "AOCS", type matches "Current", value < 2))
    then
        Conclusion c = new Conclusion(Conclusion.AOCSLowResistanceFailure, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "Payload Switch high current error"
    when
        $sensorSwitch : Sensor(subSystem matches "Payload", type matches "Switch", value == 0)
        Observation(description matches Observation.PayloadThermalSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Payload", type matches "Current", value < 2))
    then
        Conclusion c = new Conclusion(Conclusion.PayloadLowResistanceFailure, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "Power Switch high current error"
    when
        $sensorSwitch : Sensor(subSystem matches "Power", type matches "Switch", value == 0)
        Observation(description matches Observation.PowerThermalSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Power", type matches "Current", value < 2))
    then
        Conclusion c = new Conclusion(Conclusion.PowerLowResistanceFailure, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "OBC Switch high current error"
    when
        $sensorSwitch : Sensor(subSystem matches "OBC", type matches "Switch", value == 0)
        Observation(description matches Observation.OBCThermalSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "OBC", type matches "Current", value < 2))
    then
        Conclusion c = new Conclusion(Conclusion.OBCLowResistanceFailure, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "Communication Switch high current error"
    when
        $sensorSwitch : Sensor(subSystem matches "Communication", type matches "Switch", value == 0)
        Observation(description matches Observation.CommunicationThermalSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Communication", type matches "Current", value < 2))
    then
        Conclusion c = new Conclusion(Conclusion.CommunicationHighResistanceFailure, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "Thermal Switch high current error"
    when
        $sensorSwitch : Sensor(subSystem matches "Thermal", type matches "Switch", value == 0)
        Observation(description matches Observation.ThermalControllerThermalSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Thermal", type matches "Current", value < 2))
    then
        Conclusion c = new Conclusion(Conclusion.ThermalControllerLowResistanceFailure, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "Propulsion Switch high current error"
    when
        $sensorSwitch : Sensor(subSystem matches "Propulsion", type matches "Switch", value == 0)
        Observation(description matches Observation.PropulsionThermalSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Propulsion", type matches "Current", value < 2))
    then
        Conclusion c = new Conclusion(Conclusion.PropulsionLowResistanceFailure, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "AOCS Switch high current error"
    when
        $sensorSwitch : Sensor(subSystem matches "AOCS", type matches "Switch", value == 0)
        Observation(description matches Observation.AOCSThermalSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "AOCS", type matches "Current", value > 5))
    then
        Conclusion c = new Conclusion(Conclusion.AOCSHighResistanceFailure, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "Payload Switch high current error"
    when
        $sensorSwitch : Sensor(subSystem matches "Payload", type matches "Switch", value == 0)
        Observation(description matches Observation.PayloadThermalSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Payload", type matches "Current", value > 5))
    then
        Conclusion c = new Conclusion(Conclusion.PayloadHighResistanceFailure, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "Power Switch high current error"
    when
        $sensorSwitch : Sensor(subSystem matches "Power", type matches "Switch", value == 0)
        Observation(description matches Observation.PowerThermalSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Power", type matches "Current", value > 5))
    then
        Conclusion c = new Conclusion(Conclusion.PowerHighResistanceFailure, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "OBC Switch high current error"
    when
        $sensorSwitch : Sensor(subSystem matches "OBC", type matches "Switch", value == 0)
        Observation(description matches Observation.OBCThermalSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "OBC", type matches "Current", value > 5))
    then
        Conclusion c = new Conclusion(Conclusion.OBCHighResistanceFailure, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "Communication Switch high current error"
    when
        $sensorSwitch : Sensor(subSystem matches "Communication", type matches "Switch", value == 0)
        Observation(description matches Observation.CommunicationThermalSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Communication", type matches "Current", value > 5))
    then
        Conclusion c = new Conclusion(Conclusion.CommunicationHighResistanceFailure, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "Thermal Switch high current error"
    when
        $sensorSwitch : Sensor(subSystem matches "Thermal", type matches "Switch", value == 0)
        Observation(description matches Observation.ThermalControllerThermalSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Thermal", type matches "Current", value > 5))
    then
        Conclusion c = new Conclusion(Conclusion.ThermalControllerHighResistanceFailure, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "Propulsion Switch high current error"
    when
        $sensorSwitch : Sensor(subSystem matches "Propulsion", type matches "Switch", value == 0)
        Observation(description matches Observation.PropulsionThermalSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Propulsion", type matches "Current", value > 5))
    then
        Conclusion c = new Conclusion(Conclusion.PropulsionHighResistanceFailure, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "AOCS Switch high current error"
    when
        $sensorSwitch : Sensor(subSystem matches "AOCS", type matches "Switch", value == 0)
        Observation(description matches Observation.AOCSThermalSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "AOCS", type matches "Current", value > 5))
    then
        Conclusion c = new Conclusion(Conclusion.AOCSRushFailure, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "Payload Switch high current error"
    when
        $sensorSwitch : Sensor(subSystem matches "Payload", type matches "Switch", value == 0)
        Observation(description matches Observation.PayloadThermalSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Payload", type matches "Current", value > 5))
    then
        Conclusion c = new Conclusion(Conclusion.PayloadRushFailure, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "Power Switch high current error"
    when
        $sensorSwitch : Sensor(subSystem matches "Power", type matches "Switch", value == 0)
        Observation(description matches Observation.PowerThermalSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Power", type matches "Current", value > 5))
    then
        Conclusion c = new Conclusion(Conclusion.PowerRushFailure, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "OBC Switch high current error"
    when
        $sensorSwitch : Sensor(subSystem matches "OBC", type matches "Switch", value == 0)
        Observation(description matches Observation.OBCThermalSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "OBC", type matches "Current", value > 5))
    then
        Conclusion c = new Conclusion(Conclusion.OBCRushFailure, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "Communication Switch high current error"
    when
        $sensorSwitch : Sensor(subSystem matches "Communication", type matches "Switch", value == 0)
        Observation(description matches Observation.CommunicationThermalSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Communication", type matches "Current", value > 5))
    then
        Conclusion c = new Conclusion(Conclusion.CommunicationRushFailure, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "Thermal Switch high current error"
    when
        $sensorSwitch : Sensor(subSystem matches "Thermal", type matches "Switch", value == 0)
        Observation(description matches Observation.ThermalControllerThermalSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Thermal", type matches "Current", value > 5))
    then
        Conclusion c = new Conclusion(Conclusion.ThermalControllerRushFailure, $sensorSwitch.getSubSystem());
		insert(c);
end

rule "Propulsion Switch high current error"
    when
        $sensorSwitch : Sensor(subSystem matches "Propulsion", type matches "Switch", value == 0)
        Observation(description matches Observation.PropulsionThermalSubSystemOK)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Propulsion", type matches "Current", value > 5))
    then
        Conclusion c = new Conclusion(Conclusion.PropulsionRushFailure, $sensorSwitch.getSubSystem());
		insert(c);
end