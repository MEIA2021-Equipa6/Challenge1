/*
 * Copyright 2015 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

package org.engcia;
// package must be defined in packages from kmodule.xml file

//list any import classes here.
import org.engcia.model.Sensor;
import org.engcia.model.Hypothesis;
import org.engcia.model.Conclusion;
import java.util.ArrayList;

//declare any global variables here

query "Conclusions"
	$conclusion : Conclusion()
end

// AOCS Module
rule "AOCS thermal sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "AOCS", type matches "Thermal", (value < -20 || value > 30)))
	then
		Conclusion c = new Conclusion(Conclusion.AOCSThermalSubSystemFailure, $sensor.getSubSystem());
		insert(c);
end

rule "AOCS thermal sensor error"
	when
	    $count : ArrayList(size = 1) from collect($sensor: Sensor(subSystem matches "AOCS", type matches "Thermal", (value < -20 || value > 30)))
	then
		Conclusion c = new Conclusion(Conclusion.AOCSThermalSensorError, $sensor.getSubSystem());
		insert(c);
end

rule "AOCS thermal sensor ok"
	when
	    $count : ArrayList(size = 0) from collect($sensor: Sensor(subSystem matches "AOCS", type matches "Thermal", (value < -20 || value > 30)))
	then
		Conclusion c = new Conclusion(Conclusion.AOCSThermalSubSystemOK, $sensor.getSubSystem());
		insert(c);
end


rule "AOCS voltage sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "AOCS", type matches "Voltage", (value < 27 || value > 32)))
	then
		Conclusion c = new Conclusion(Conclusion.AOCSVoltageSubSystemFailure, $sensor.getSubSystem());
		insert(c);
end

rule "AOCS voltage sensor error"
	when
	    $count : ArrayList(size = 1) from collect($sensor: Sensor(subSystem matches "AOCS", type matches "Voltage", (value < 27 || value > 32)))
	then
		Conclusion c = new Conclusion(Conclusion.AOCSVoltageSensorError, $sensor.getSubSystem());
		insert(c);
end

rule "AOCS voltage sensor ok"
	when
	    $count : ArrayList(size = 0) from collect($sensor: Sensor(subSystem matches "AOCS", type matches "Voltage", (value < 27 || value > 32)))
	then
		Conclusion c = new Conclusion(Conclusion.AOCSVoltageSubSystemOK, $sensor.getSubSystem());
		insert(c);
end

rule "AOCS current sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "AOCS", type matches "Current", (value < 2 || value > 5)))
	then
		Conclusion c = new Conclusion(Conclusion.AOCSCurrentSubSystemFailure, $sensor.getSubSystem());
		insert(c);
end

rule "AOCS current sensor error"
	when
	    $count : ArrayList(size = 1) from collect($sensor: Sensor(subSystem matches "AOCS", type matches "Current", (value < 2 || value > 5)))
	then
		Conclusion c = new Conclusion(Conclusion.AOCSCurrentSensorError, $sensor.getSubSystem());
		insert(c);
end

rule "AOCS current sensor ok"
	when
	    $count : ArrayList(size = 0) from collect($sensor: Sensor(subSystem matches "AOCS", type matches "Current", (value < 2 || value > 5)))
	then
		Conclusion c = new Conclusion(Conclusion.AOCSCurrentSubSystemOK, $sensor.getSubSystem());
		insert(c);
end

// Payload Module
rule "Payload thermal sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Payload", type matches "Thermal", (value < -20 || value > 30)))
	then
		Conclusion c = new Conclusion(Conclusion.PayloadThermalSubSystemFailure, $sensor.getSubSystem());
		insert(c);
end

rule "PayPayload thermal sensor error"
	when
	    $count : ArrayList(size = 1) from collect($sensor: Sensor(subSystem matches "Payload", type matches "Thermal", (value < -20 || value > 30)))
	then
		Conclusion c = new Conclusion(Conclusion.PayloadThermalSensorError, $sensor.getSubSystem());
		insert(c);
end

rule "PayPayload thermal sensor ok"
	when
	    $count : ArrayList(size = 0) from collect($sensor: Sensor(subSystem matches "Payload", type matches "Thermal", (value < -20 || value > 30)))
	then
		Conclusion c = new Conclusion(Conclusion.PayloadThermalSubSystemOK, $sensor.getSubSystem());
		insert(c);
end

rule "Payload voltage sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Payload", type matches "Voltage", (value < 27 || value > 32)))
	then
		Conclusion c = new Conclusion(Conclusion.PayloadVoltageSubSystemFailure, $sensor.getSubSystem());
		insert(c);
end

rule "Payload voltage sensor error"
	when
	    $count : ArrayList(size = 1) from collect($sensor: Sensor(subSystem matches "Payload", type matches "Voltage", (value < 27 || value > 32)))
	then
		Conclusion c = new Conclusion(Conclusion.PayloadVoltageSensorError, $sensor.getSubSystem());
		insert(c);
end

rule "PayPayload voltage sensor ok"
	when
	    $count : ArrayList(size = 0) from collect($sensor: Sensor(subSystem matches "Payload", type matches "Voltage", (value < 27 || value > 32)))
	then
		Conclusion c = new Conclusion(Conclusion.PayloadVoltageSubSystemOK, $sensor.getSubSystem());
		insert(c);
end

rule "Payload current sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Payload", type matches "Current", (value < 2 || value > 5)))
	then
		Conclusion c = new Conclusion(Conclusion.PayloadCurrentSubSystemFailure, $sensor.getSubSystem());
		insert(c);
end

rule "Payload current sensor error"
	when
	    $count : ArrayList(size = 1) from collect($sensor: Sensor(subSystem matches "Payload", type matches "Current", (value < 2 || value > 5)))
	then
		Conclusion c = new Conclusion(Conclusion.PayloadCurrentSensorError, $sensor.getSubSystem());
		insert(c);
end

rule "PayPayload current sensor ok"
	when
	    $count : ArrayList(size = 0) from collect($sensor: Sensor(subSystem matches "Payload", type matches "Current", (value < 2 || value > 5)))
	then
		Conclusion c = new Conclusion(Conclusion.PayloadCurrentSubSystemOK, $sensor.getSubSystem());
		insert(c);
end

// Power Module
rule "Power thermal sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Power", type matches "Thermal", (value < -20 || value > 30)))
	then
		Conclusion c = new Conclusion(Conclusion.PowerThermalSubSystemFailure, $sensor.getSubSystem());
		insert(c);
end

rule "Power thermal sensor error"
	when
	    $count : ArrayList(size = 1) from collect($sensor: Sensor(subSystem matches "Power", type matches "Thermal", (value < -20 || value > 30)))
	then
		Conclusion c = new Conclusion(Conclusion.PowerThermalSensorError, $sensor.getSubSystem());
		insert(c);
end

rule "Power thermal sensor ok"
	when
	    $count : ArrayList(size = 0) from collect($sensor: Sensor(subSystem matches "Power", type matches "Thermal", (value < -20 || value > 30)))
	then
		Conclusion c = new Conclusion(Conclusion.PowerThermalSubSystemOK, $sensor.getSubSystem());
		insert(c);
end

rule "Power voltage sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Power", type matches "Voltage", (value < 27 || value > 32)))
	then
		Conclusion c = new Conclusion(Conclusion.PowerVoltageSubSystemFailure, $sensor.getSubSystem());
		insert(c);
end

rule "Power voltage sensor error"
	when
	    $count : ArrayList(size = 1) from collect($sensor: Sensor(subSystem matches "Power", type matches "Voltage", (value < 27 || value > 32)))
	then
		Conclusion c = new Conclusion(Conclusion.PowerVoltageSensorError, $sensor.getSubSystem());
		insert(c);
end

rule "Power voltage sensor ok"
	when
	    $count : ArrayList(size = 0) from collect($sensor: Sensor(subSystem matches "Power", type matches "Voltage", (value < 27 || value > 32)))
	then
		Conclusion c = new Conclusion(Conclusion.PowerVoltageSubSystemOK, $sensor.getSubSystem());
		insert(c);
end

rule "Power current sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Power", type matches "Current", (value < 2 || value > 5)))
	then
		Conclusion c = new Conclusion(Conclusion.PowerCurrentSubSystemFailure, $sensor.getSubSystem());
		insert(c);
end

rule "Power current sensor error"
	when
	    $count : ArrayList(size = 1) from collect($sensor: Sensor(subSystem matches "Power", type matches "Current", (value < 2 || value > 5)))
	then
		Conclusion c = new Conclusion(Conclusion.PowerCurrentSensorError, $sensor.getSubSystem());
		insert(c);
end

rule "Power current sensor ok"
	when
	    $count : ArrayList(size = 0) from collect($sensor: Sensor(subSystem matches "Power", type matches "Current", (value < 2 || value > 5)))
	then
		Conclusion c = new Conclusion(Conclusion.PowerCurrentSubSystemOK, $sensor.getSubSystem());
		insert(c);
end

// OBC Module
rule "OBC thermal sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "OBC", type matches "Thermal", (value < -20 || value > 30)))
	then
		Conclusion c = new Conclusion(Conclusion.OBCThermalSubSystemFailure, $sensor.getSubSystem());
		insert(c);
end

rule "OBC thermal sensor error"
	when
	    $count : ArrayList(size = 1) from collect($sensor: Sensor(subSystem matches "OBC", type matches "Thermal", (value < -20 || value > 30)))
	then
		Conclusion c = new Conclusion(Conclusion.OBCThermalSensorError, $sensor.getSubSystem());
		insert(c);
end


rule "OBC thermal sensor ok"
	when
	    $count : ArrayList(size = 0) from collect($sensor: Sensor(subSystem matches "OBC", type matches "Thermal", (value < -20 || value > 30)))
	then
		Conclusion c = new Conclusion(Conclusion.OBCThermalSubSystemOK, $sensor.getSubSystem());
		insert(c);
end


rule "OBC voltage sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "OBC", type matches "Voltage", (value < 27 || value > 32)))
	then
		Conclusion c = new Conclusion(Conclusion.OBCVoltageSubSystemFailure, $sensor.getSubSystem());
		insert(c);
end

rule "OBC voltage sensor error"
	when
	    $count : ArrayList(size = 1) from collect($sensor: Sensor(subSystem matches "OBC", type matches "Voltage", (value < 27 || value > 32)))
	then
		Conclusion c = new Conclusion(Conclusion.OBCVoltageSensorError, $sensor.getSubSystem());
		insert(c);
end

rule "OBC voltage sensor ok"
	when
	    $count : ArrayList(size = 0) from collect($sensor: Sensor(subSystem matches "OBC", type matches "Voltage", (value < 27 || value > 32)))
	then
		Conclusion c = new Conclusion(Conclusion.OBCVoltageSubSystemOK, $sensor.getSubSystem());
		insert(c);
end

rule "OBC current sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "OBC", type matches "Current", (value < 2 || value > 5)))
	then
		Conclusion c = new Conclusion(Conclusion.OBCCurrentSubSystemFailure, $sensor.getSubSystem());
		insert(c);
end

rule "OBC current sensor error"
	when
	    $count : ArrayList(size = 1) from collect($sensor: Sensor(subSystem matches "OBC", type matches "Current", (value < 2 || value > 5)))
	then
		Conclusion c = new Conclusion(Conclusion.OBCCurrentSensorError, $sensor.getSubSystem());
		insert(c);
end

rule "OBC current sensor ok"
	when
	    $count : ArrayList(size = 0) from collect($sensor: Sensor(subSystem matches "OBC", type matches "Current", (value < 2 || value > 5)))
	then
		Conclusion c = new Conclusion(Conclusion.OBCCurrentSubSystemOK, $sensor.getSubSystem());
		insert(c);
end

// Communication Module
rule "Communication thermal sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Communication", type matches "Thermal", (value < -20 || value > 30)))
	then
		Conclusion c = new Conclusion(Conclusion.CommunicationThermalSubSystemFailure, $sensor.getSubSystem());
		insert(c);
end

rule "Communication thermal sensor error"
	when
	    $count : ArrayList(size = 1) from collect($sensor: Sensor(subSystem matches "Communication", type matches "Thermal", (value < -20 || value > 30)))
	then
		Conclusion c = new Conclusion(Conclusion.CommunicationThermalSensorError, $sensor.getSubSystem());
		insert(c);
end

rule "Communication thermal sensor ok"
	when
	    $count : ArrayList(size = 0) from collect($sensor: Sensor(subSystem matches "Communication", type matches "Thermal", (value < -20 || value > 30)))
	then
		Conclusion c = new Conclusion(Conclusion.CommunicationThermalSubSystemOK, $sensor.getSubSystem());
		insert(c);
end

rule "Communication voltage sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Communication", type matches "Voltage", (value < 27 || value > 32)))
	then
		Conclusion c = new Conclusion(Conclusion.CommunicationVoltageSubSystemFailure, $sensor.getSubSystem());
		insert(c);
end

rule "Communication voltage sensor error"
	when
	    $count : ArrayList(size = 1) from collect($sensor: Sensor(subSystem matches "Communication", type matches "Voltage", (value < 27 || value > 32)))
	then
		Conclusion c = new Conclusion(Conclusion.CommunicationVoltageSensorError, $sensor.getSubSystem());
		insert(c);
end

rule "Communication voltage sensor ok"
	when
	    $count : ArrayList(size = 0) from collect($sensor: Sensor(subSystem matches "Communication", type matches "Voltage", (value < 27 || value > 32)))
	then
		Conclusion c = new Conclusion(Conclusion.CommunicationVoltageSubSystemOK, $sensor.getSubSystem());
		insert(c);
end

rule "Communication current sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Communication", type matches "Current", (value < 2 || value > 5)))
	then
		Conclusion c = new Conclusion(Conclusion.CommunicationCurrentSubSystemFailure, $sensor.getSubSystem());
		insert(c);
end

rule "Communication current sensor error"
	when
	    $count : ArrayList(size = 1) from collect($sensor: Sensor(subSystem matches "Communication", type matches "Current", (value < 2 || value > 5)))
	then
		Conclusion c = new Conclusion(Conclusion.CommunicationCurrentSensorError, $sensor.getSubSystem());
		insert(c);
end

rule "Communication current sensor ok"
	when
	    $count : ArrayList(size = 0) from collect($sensor: Sensor(subSystem matches "Communication", type matches "Current", (value < 2 || value > 5)))
	then
		Conclusion c = new Conclusion(Conclusion.CommunicationCurrentSubSystemOK, $sensor.getSubSystem());
		insert(c);
end

// Thermal Controller Module
rule "Thermal Controller thermal sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Thermal Controller", type matches "Thermal", (value < -20 || value > 30)))
	then
		Conclusion c = new Conclusion(Conclusion.ThermalControllerThermalSubSystemFailure, $sensor.getSubSystem());
		insert(c);
end

rule "Thermal Controller thermal sensor error"
	when
	    $count : ArrayList(size = 1) from collect($sensor: Sensor(subSystem matches "Thermal Controller", type matches "Thermal", (value < -20 || value > 30)))
	then
		Conclusion c = new Conclusion(Conclusion.ThermalControllerThermalSensorError, $sensor.getSubSystem());
		insert(c);
end

rule "Thermal Controller thermal sensor ok"
	when
	    $count : ArrayList(size = 0) from collect($sensor: Sensor(subSystem matches "Communication", type matches "Thermal", (value < -20 || value > 30)))
	then
		Conclusion c = new Conclusion(Conclusion.ThermalControllerThermalSubSystemOK, $sensor.getSubSystem());
		insert(c);
end

rule "Thermal Controller voltage sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Thermal Controller", type matches "Voltage", (value < 27 || value > 32)))
	then
		Conclusion c = new Conclusion(Conclusion.ThermalControllerVoltageSubSystemFailure, $sensor.getSubSystem());
		insert(c);
end

rule "Thermal Controller voltage sensor error"
	when
	    $count : ArrayList(size = 1) from collect($sensor: Sensor(subSystem matches "Thermal Controller", type matches "Voltage", (value < 27 || value > 32)))
	then
		Conclusion c = new Conclusion(Conclusion.ThermalControllerVoltageSensorError, $sensor.getSubSystem());
		insert(c);
end

rule "Thermal Controller voltage sensor ok"
	when
	    $count : ArrayList(size = 0) from collect($sensor: Sensor(subSystem matches "Communication", type matches "Voltage", (value < 27 || value > 32)))
	then
		Conclusion c = new Conclusion(Conclusion.ThermalControllerVoltageSubSystemOK, $sensor.getSubSystem());
		insert(c);
end

rule "Thermal Controller current sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Thermal Controller", type matches "Current", (value < 2 || value > 5)))
	then
		Conclusion c = new Conclusion(Conclusion.ThermalControllerCurrentSubSystemFailure, $sensor.getSubSystem());
		insert(c);
end

rule "Thermal Controller current sensor error"
	when
	    $count : ArrayList(size = 1) from collect($sensor: Sensor(subSystem matches "Thermal Controller", type matches "Current", (value < 2 || value > 5)))
	then
		Conclusion c = new Conclusion(Conclusion.ThermalControllerCurrentSensorError, $sensor.getSubSystem());
		insert(c);
end

rule "Thermal Controller current sensor ok"
	when
	    $count : ArrayList(size = 0) from collect($sensor: Sensor(subSystem matches "Communication", type matches "Current", (value < 2 || value > 5)))
	then
		Conclusion c = new Conclusion(Conclusion.ThermalControllerCurrentSubSystemOK, $sensor.getSubSystem());
		insert(c);
end

// Propulsion Module
rule "Propulsion thermal sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Propulsion", type matches "Thermal", (value < -20 || value > 30)))
	then
		Conclusion c = new Conclusion(Conclusion.PropulsionThermalSubSystemFailure, $sensor.getSubSystem());
		insert(c);
end

rule "Propulsion thermal sensor error"
	when
	    $count : ArrayList(size = 1) from collect($sensor: Sensor(subSystem matches "Propulsion", type matches "Thermal", (value < -20 || value > 30)))
	then
		Conclusion c = new Conclusion(Conclusion.PropulsionThermalSensorError, $sensor.getSubSystem());
		insert(c);
end

rule "Propulsion thermal sensor ok"
	when
	    $count : ArrayList(size = 0) from collect($sensor: Sensor(subSystem matches "Propulsion", type matches "Thermal", (value < -20 || value > 30)))
	then
		Conclusion c = new Conclusion(Conclusion.PropulsionThermalSubSystemOK, $sensor.getSubSystem());
		insert(c);
end

rule "Propulsion voltage sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Propulsion", type matches "Voltage", (value < 27 || value > 32)))
	then
		Conclusion c = new Conclusion(Conclusion.PropulsionVoltageSubSystemFailure, $sensor.getSubSystem());
		insert(c);
end

rule "Propulsion voltage sensor error"
	when
	    $count : ArrayList(size = 1) from collect($sensor: Sensor(subSystem matches "Propulsion", type matches "Voltage", (value < 27 || value > 32)))
	then
		Conclusion c = new Conclusion(Conclusion.PropulsionVoltageSensorError, $sensor.getSubSystem());
		insert(c);
end

rule "Propulsion voltage sensor ok"
	when
	    $count : ArrayList(size = 0) from collect($sensor: Sensor(subSystem matches "Propulsion", type matches "Voltage", (value < 27 || value > 32)))
	then
		Conclusion c = new Conclusion(Conclusion.PropulsionVoltageSubSystemOK, $sensor.getSubSystem());
		insert(c);
end

rule "Propulsion current sub-system failure"
	when
	    $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Propulsion", type matches "Current", (value < 2 || value > 5)))
	then
		Conclusion c = new Conclusion(Conclusion.PropulsionCurrentSubSystemFailure, $sensor.getSubSystem());
		insert(c);
end

rule "Propulsion current sensor error"
	when
	    $count : ArrayList(size = 1) from collect($sensor: Sensor(subSystem matches "Propulsion", type matches "Current", (value < 2 || value > 5)))
	then
		Conclusion c = new Conclusion(Conclusion.PropulsionCurrentSensorError, $sensor.getSubSystem());
		insert(c);
end

rule "Propulsion current sensor ok"
	when
	    $count : ArrayList(size = 0) from collect($sensor: Sensor(subSystem matches "Propulsion", type matches "Current", (value < 2 || value > 5)))
	then
		Conclusion c = new Conclusion(Conclusion.PropulsionCurrentSubSystemOK, $sensor.getSubSystem());
		insert(c);
end

rule "AOCS Switch Not Properly Off"
    when
        $conclusion : Conclusion(AOCSVoltageSubSystemOK)
        $sensorSwitch : Sensor(subSystem matches "AOCS", type matches "Switch", value == 0)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "AOCS", type matches "Current", 0 < value < 0.1))
    then
        Conclusion c = new Conclusion(Conclusion.AOCSSwitchNotOff, $sensorSwitch.getSubSystem());
end

rule "AOCS Switch Not Properly On"
    when
        $conclusion : Conclusion(AOCSVoltageSubSystemOK)
        $sensorSwitch : Sensor(subSystem matches "AOCS", type matches "Switch", value == 1)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "AOCS", type matches "Current", 2 < value < 5))
    then
        Conclusion c = new Conclusion(Conclusion.AOCSSwitchNotOn, $sensorSwitch.getSubSystem());
end

rule "Payload Switch Not Properly Off"
    when
        $conclusion : Conclusion(PayloadVoltageSubSystemOK)
        $sensorSwitch : Sensor(subSystem matches "Payload", type matches "Switch", value == 0)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Payload", type matches "Current", 0 < value < 0.1))
    then
        Conclusion c = new Conclusion(Conclusion.PayloadSwitchNotOff, $sensorSwitch.getSubSystem());
end

rule "Payload Switch Not Properly On"
    when
        $conclusion : Conclusion(PayloadVoltageSubSystemOK)
        $sensorSwitch : Sensor(subSystem matches "Payload", type matches "Switch", value == 1)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Payload", type matches "Current", 2 < value < 5))
    then
        Conclusion c = new Conclusion(Conclusion.PayloadSwitchNotOn, $sensorSwitch.getSubSystem());
end

rule "Power Switch Not Properly Off"
    when
        $conclusion : Conclusion(PowerVoltageSubSystemOK)
        $sensorSwitch : Sensor(subSystem matches "Power", type matches "Switch", value == 0)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Power", type matches "Current", 0 < value < 0.1))
    then
        Conclusion c = new Conclusion(Conclusion.PowerSwitchNotOff, $sensorSwitch.getSubSystem());
end

rule "Power Switch Not Properly On"
    when
        $conclusion : Conclusion(PowerVoltageSubSystemOK)
        $sensorSwitch : Sensor(subSystem matches "Power", type matches "Switch", value == 1)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Power", type matches "Current", 2 < value < 5))
    then
        Conclusion c = new Conclusion(Conclusion.PowerSwitchNotOn, $sensorSwitch.getSubSystem());
end

rule "OBC Switch Not Properly Off"
    when
        $conclusion : Conclusion(OBCVoltageSubSystemOK)
        $sensorSwitch : Sensor(subSystem matches "OBC", type matches "Switch", value == 0)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "OBC", type matches "Current", 0 < value < 0.1))
    then
        Conclusion c = new Conclusion(Conclusion.OBCSwitchNotOff, $sensorSwitch.getSubSystem());
end

rule "OBC Switch Not Properly On"
    when
        $conclusion : Conclusion(OBCVoltageSubSystemOK)
        $sensorSwitch : Sensor(subSystem matches "OBC", type matches "Switch", value == 1)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "OBC", type matches "Current", 2 < value < 5))
    then
        Conclusion c = new Conclusion(Conclusion.OBCSwitchNotOn, $sensorSwitch.getSubSystem());
end

rule "Communication Switch Not Properly Off"
    when
        $conclusion : Conclusion(CommunicationVoltageSubSystemOK)
        $sensorSwitch : Sensor(subSystem matches "Power", type matches "Communication", value == 0)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Communication", type matches "Current", 0 < value < 0.1))
    then
        Conclusion c = new Conclusion(Conclusion.CommunicationSwitchNotOff, $sensorSwitch.getSubSystem());
end

rule "Communication Switch Not Properly On"
    when
        $conclusion : Conclusion(CommunicationVoltageSubSystemOK)
        $sensorSwitch : Sensor(subSystem matches "Communication", type matches "Switch", value == 1)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Communication", type matches "Current", 2 < value < 5))
    then
        Conclusion c = new Conclusion(Conclusion.CommunicationSwitchNotOn, $sensorSwitch.getSubSystem());
end

rule "Thermal Controller Switch Not Properly Off"
    when
        $conclusion : Conclusion(ThermalControllerVoltageSubSystemOK)
        $sensorSwitch : Sensor(subSystem matches "Thermal Controller", type matches "Switch", value == 0)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Thermal Controller", type matches "Current", 0 < value < 0.1))
    then
        Conclusion c = new Conclusion(Conclusion.ThermalControllerSwitchNotOff, $sensorSwitch.getSubSystem());
end

rule "Thermal Controller Switch Not Properly On"
    when
        $conclusion : Conclusion(ThermalControllerVoltageSubSystemOK)
        $sensorSwitch : Sensor(subSystem matches "Thermal Controller", type matches "Switch", value == 1)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Thermal Controller", type matches "Current", 2 < value < 5))
    then
        Conclusion c = new Conclusion(Conclusion.ThermalControllerSwitchNotOn, $sensorSwitch.getSubSystem());
end

rule "Propulsion Switch Not Properly Off"
    when
        $conclusion : Conclusion(PropulsionVoltageSubSystemOK)
        $sensorSwitch : Sensor(subSystem matches "Propulsion", type matches "Switch", value == 0)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Propulsion", type matches "Current", 0 < value < 0.1))
    then
        Conclusion c = new Conclusion(Conclusion.PropulsionSwitchNotOff, $sensorSwitch.getSubSystem());
end

rule "Propulsion Switch Not Properly On"
    when
        $conclusion : Conclusion(PropulsionVoltageSubSystemOK)
        $sensorSwitch : Sensor(subSystem matches "Propulsion", type matches "Switch", value == 1)
        $count : ArrayList(size > 1) from collect($sensor: Sensor(subSystem matches "Propulsion", type matches "Current", 2 < value < 5))
    then
        Conclusion c = new Conclusion(Conclusion.PropulsionSwitchNotOn, $sensorSwitch.getSubSystem());
end